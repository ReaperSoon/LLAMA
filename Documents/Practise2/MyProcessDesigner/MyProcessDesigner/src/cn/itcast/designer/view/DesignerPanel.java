/*
 * ProcessPanel.java
 *
 * Created on 2010-11-3, 17:26:27
 */
package cn.itcast.designer.view;

import cn.itcast.designer.core.FuncType;
import cn.itcast.designer.core.action.ArchiveIOAction;
import cn.itcast.designer.core.controller.Controller;
import cn.itcast.designer.core.controller.ExecutionContext;
import cn.itcast.designer.core.controller.impl.ConfigureNodeController;
import cn.itcast.designer.core.controller.impl.DrawNodeController;
import cn.itcast.designer.core.controller.impl.DrawTransitionController;
import cn.itcast.designer.core.controller.impl.MoveNodeController;
import cn.itcast.designer.core.controller.impl.NodeTextInputController;
import cn.itcast.designer.core.controller.impl.ResizeNodeController;
import cn.itcast.designer.core.controller.impl.SelectNodeController;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author tyg
 */
public class DesignerPanel extends javax.swing.JPanel {

    /**
     *  Controller列表
     */
    private List<Controller> controllerList = new ArrayList<Controller>();
    private ExecutionContext executionContext = ExecutionContext.getInstance(this);
    /**
     * 主面板对象，用于画完一个元素后还原为选择功能用的
     */
    public MainFrame mainFrame;

    //--------------------------------------------------------------------------
    /** Creates new form ProcessPanel */
    public DesignerPanel(MainFrame mainFrame) {
        this.mainFrame = mainFrame;
        initComponents();

        // 初始化并按顺序添加Controller
        controllerList.add(new DrawNodeController()); // 画节点功能
        controllerList.add(new DrawTransitionController()); // 画连线功能
        controllerList.add(new SelectNodeController()); // 选择节点功能
        controllerList.add(new MoveNodeController()); // 移动节点功能
        controllerList.add(new ResizeNodeController()); // 调整节点大小功能
        controllerList.add(new NodeTextInputController()); // 双击节点输入文字功能
        controllerList.add(new ConfigureNodeController(mainFrame)); // 给节点配置属性功能
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        // 1，准备当前的信息上下文（记下开始点）
        executionContext.setStartPoint(evt.getX(), evt.getY());

        // 2，调用相关的Controller
        for (Controller controller : controllerList) {
            controller.doWhenMousePressed(executionContext, evt);
        }

        // 3，如果需要重画，则重画
        executionContext.getHelper().repaintDesignerPanelIfNeed();
    }//GEN-LAST:event_formMousePressed

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        // 1，准备当前的信息上下文（记下开始点）

        // 2，调用相关的Controller
        for (Controller controller : controllerList) {
            controller.doWhenMouseDragged(executionContext, evt);
        }

        // 3，如果需要重画，则重画
        executionContext.getHelper().repaintDesignerPanelIfNeed();
    }//GEN-LAST:event_formMouseDragged

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        // 1，准备当前的信息上下文（记下开始点）

        // 2，调用相关的Controller
        for (Controller controller : controllerList) {
            controller.doWhenMouseReleased(executionContext, evt);
        }

        // 3，如果需要重画，则重画
        executionContext.getHelper().repaintDesignerPanelIfNeed();

        // 5，TODO 还原为使用选择功能（如果当前正在使用选择功能或连线功能，则不还原）
        if (executionContext.funcType != FuncType.SELECT && executionContext.funcType != FuncType.PROCESS_TRANSITION) {
            executionContext.funcType = FuncType.SELECT;
            mainFrame.setToggleButtonsStatus(mainFrame.getBtnSelect(), true);
        }
    }//GEN-LAST:event_formMouseReleased

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // 1，准备当前的信息上下文（记下开始点）

        // 2，调用相关的Controller
        // 双击鼠标左键
        if (evt.getClickCount() == 2 && evt.getButton() == MouseEvent.BUTTON1) {
            for (Controller controller : controllerList) {
                controller.doWhenMouseDoubleClickButton1(executionContext, evt);
            }
        }

        // 3，如果需要重画，则重画
        executionContext.getHelper().repaintDesignerPanelIfNeed();
    }//GEN-LAST:event_formMouseClicked

    private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved
        // 1，准备当前的信息上下文（记下开始点）

        // 2，调用相关的Controller
        for (Controller controller : controllerList) {
            controller.doWhenMouseMoved(executionContext, evt);
        }

        // 3，如果需要重画，则重画
        executionContext.getHelper().repaintDesignerPanelIfNeed();
    }//GEN-LAST:event_formMouseMoved

    /**
     * 删除所有选中的节点元素，与之关联的连线也会被删除
     */
    public void deleteSelectedProcessNode() {
        executionContext.getHelper().deleteSelectedNodes();
    }

    /**
     * 画图
     * @param g
     */
    @Override
    public void paint(Graphics graphics) {
        // 使用图片缓冲，先画到图片上，再把图片画到组件上
        Image image = this.createImage(this.getWidth(), this.getHeight());
        executionContext.getHelper().drawAllToImage(image);
        graphics.drawImage(image, 0, 0, this.getWidth(), this.getHeight(), this);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables


    /**
     * 保存流程定义文档
     * @param path
     */
    void saveProcessArchive(String path) {
        new ArchiveIOAction().saveProcessArchive(executionContext, path);
    }

    /**
     * 设置当前使用的功能类型
     * @param funcType
     */
    public void setFuncType(FuncType funcType) {
        executionContext.funcType = funcType;
    }

    public ExecutionContext getExecutionContext() {
        return executionContext;
    }

    
}
